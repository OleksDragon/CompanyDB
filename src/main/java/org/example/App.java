package org.example;

import org.example.dao.DepartmentDAO;
import org.example.dao.EmployeeDAO;
import org.example.models.Department;
import org.example.models.Employee;
import org.example.util.*;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class App {
    public static void main(String[] args) throws SQLException {
        Scanner scanner = new Scanner(System.in);
        DepartmentDAO departmentDAO = new DepartmentDAO();
        EmployeeDAO employeeDAO = new EmployeeDAO();

        while (true) {
            System.out.println("\n================== –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ ==================");
            System.out.println("1 - –í–∏–≤–µ—Å—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ë–î");
            System.out.println("2 - –î–æ–¥–∞—Ç–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç");
            System.out.println("3 - –î–æ–¥–∞—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞");
            System.out.println("4 - –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç");
            System.out.println("5 - –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞");
            System.out.println("6 - –í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞");
            System.out.println("7 - –í–∏–¥–∞–ª–∏—Ç–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç (–∑ —É—Å—ñ–º–∞ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞–º–∏)");
            System.out.println("8 - –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É");
            System.out.println("9 - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –≤ —ñ–Ω—à–∏–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç");
            System.out.println("10 - –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫–æ—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ (Batch Update)");
            System.out.println("11 - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑–∞ –∑–∞—Ä–ø–ª–∞—Ç–æ—é");
            System.out.println("12 - –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ 10 000 —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ (–∑–≤–∏—á–∞–π–Ω–∏–π INSERT)");
            System.out.println("13 - –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ 10 000 —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ (batch INSERT)");
            System.out.println("14 - –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è (–ø–µ—Ä–µ–≥–ª—è–¥ –ø–æ 20 —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤)");
            System.out.println("15 - –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è (Backup –≤ CSV)");
            System.out.println("16 - –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ CSV (Restore)");

            System.out.println("0 - –í–∏—Ö—ñ–¥");
            System.out.print("\n–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é: ");

            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    DatabaseUtils.printDatabaseInfo();
                    break;
                case 2:
                    addDepartmentMenu(scanner, departmentDAO);
                    break;
                case 3:
                    addEmployeeMenu(scanner, employeeDAO);
                    break;
                case 4:
                    updateDepartmentMenu(scanner, departmentDAO);
                    break;
                case 5:
                    updateEmployeeMenu(scanner, employeeDAO);
                    break;
                case 6:
                    deleteEmployeeMenu(scanner, employeeDAO);
                    break;
                case 7:
                    deleteDepartmentMenu(scanner, departmentDAO);
                    break;
                case 8:
                    getEmployeesByDepartmentMenu(scanner, departmentDAO);
                    break;
                case 9:
                    transferEmployee(scanner, employeeDAO);
                    break;
                case 10:
                    transferMultipleEmployees(scanner, employeeDAO);
                    break;
                case 11:
                    showEmployeeSalaryRanking(employeeDAO);
                    break;
                case 12:
                    System.out.println("–î–æ–¥–∞–≤–∞–Ω–Ω—è 10 000 —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ (–∑–≤–∏—á–∞–π–Ω–∏–π INSERT)...");
                    EmployeeLoader.insertEmployeesIndividually(10_000);
                    break;
                case 13:
                    System.out.println("–î–æ–¥–∞–≤–∞–Ω–Ω—è 10 000 —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ (batch INSERT)...");
                    EmployeeLoader.insertEmployeesBatch(10_000);
                    break;
                case 14:
                    paginateEmployees(scanner);
                    break;
                case 15:
                    System.out.println("–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó...");
                    DatabaseBackup.backupToCSV();
                    break;
                case 16:
                    System.out.println("–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ—ó –∫–æ–ø—ñ—ó...");
                    DatabaseRestore.restoreFromCSV();
                    break;
                case 0:
                    System.out.println("–í–∏—Ö—ñ–¥...");
                    scanner.close();
                    return;
                default:
                    System.out.println("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            }
        }
    }

    private static void deleteEmployeeMenu(Scanner scanner, EmployeeDAO employeeDAO) throws SQLException {
        System.out.print("–í–≤–µ–¥—ñ—Ç—å ID —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏: ");
        int id = scanner.nextInt();

        employeeDAO.deleteEmployee(id);
        System.out.println("‚úÖ –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ –≤–∏–¥–∞–ª–µ–Ω–∏–π!");
    }

    private static void showEmployeeSalaryRanking(EmployeeDAO employeeDAO) {
        try {
            List<String> ranking = employeeDAO.getEmployeeSalaryRanking();
            System.out.println("\nüèÜ –†–µ–π—Ç–∏–Ω–≥ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –∑–∞ –∑–∞—Ä–ø–ª–∞—Ç–æ—é:");
            ranking.forEach(System.out::println);
        } catch (SQLException e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: " + e.getMessage());
        }
    }

    private static void addDepartmentMenu(Scanner scanner, DepartmentDAO departmentDAO) throws SQLException {
        System.out.println("\nüìù –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É (–≤–≤–µ–¥—ñ—Ç—å `0` –¥–ª—è –≤–∏—Ö–æ–¥—É)");

        System.out.print("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É: ");
        String name = scanner.nextLine();
        if (name.equals("0")) {
            System.out.println("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...");
            return;
        }

        System.out.print("–í–≤–µ–¥—ñ—Ç—å –±—é–¥–∂–µ—Ç –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É: ");
        if (!scanner.hasNextDouble()) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.");
            scanner.nextLine();
            return;
        }
        double budget = scanner.nextDouble();
        scanner.nextLine();

        departmentDAO.addDepartment(name, budget);
        System.out.println("‚úÖ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");
    }


    private static void addEmployeeMenu(Scanner scanner, EmployeeDAO employeeDAO) throws SQLException {
        System.out.println("\nüìù –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ (–≤–≤–µ–¥—ñ—Ç—å `0` –¥–ª—è –≤–∏—Ö–æ–¥—É)");

        // –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        System.out.print("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞: ");
        String name = scanner.nextLine();
        if (name.equals("0")) {
            System.out.println("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...");
            return;
        }

        // –í–≤–æ–¥ ID –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞
        System.out.print("–í–≤–µ–¥—ñ—Ç—å ID –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É: ");
        if (!scanner.hasNextInt()) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ (ID –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É). –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.");
            scanner.nextLine();
            return;
        }
        int departmentId = scanner.nextInt();
        if (departmentId == 0) {
            System.out.println("üîô –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...");
            return;
        }

        // –í–≤–æ–¥ –∑–∞—Ä–ø–ª–∞—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        System.out.print("–í–≤–µ–¥—ñ—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞: ");
        if (!scanner.hasNextDouble()) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ (–∑–∞—Ä–ø–ª–∞—Ç–∞). –û–ø–µ—Ä–∞—Ü—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.");
            scanner.nextLine();
            return;
        }
        double salary = scanner.nextDouble();
        scanner.nextLine();

        employeeDAO.addEmployee(name, salary, departmentId);
        System.out.println("‚úÖ –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");
    }

    private static void updateDepartmentMenu(Scanner scanner, DepartmentDAO departmentDAO) throws SQLException {
        System.out.print("–í–≤–µ–¥—ñ—Ç—å ID –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏: ");
        int id = scanner.nextInt();
        scanner.nextLine();

        System.out.print("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É: ");
        String name = scanner.nextLine();
        System.out.print("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –±—é–¥–∂–µ—Ç –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É: ");
        double budget = scanner.nextDouble();

        departmentDAO.updateDepartment(id,name,budget);
        System.out.println("‚úÖ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");
    }

    private static void updateEmployeeMenu(Scanner scanner, EmployeeDAO employeeDAO) throws SQLException {
        System.out.print("–í–≤–µ–¥—ñ—Ç—å ID —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏: ");
        int id = scanner.nextInt();
        scanner.nextLine();

        System.out.print("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞: ");
        String name = scanner.nextLine();
        System.out.print("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π ID –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É: ");
        int departmentId = scanner.nextInt();
        System.out.print("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –∑–∞—Ä–ø–ª–∞—Ç—É —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞: ");
        double salary = scanner.nextDouble();

        employeeDAO.updateEmployee(id, name, salary, departmentId);
        System.out.println("‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ!");
    }

    private static void deleteDepartmentMenu(Scanner scanner, DepartmentDAO departmentDAO) throws SQLException {
        System.out.print("–í–≤–µ–¥—ñ—Ç—å ID –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏: ");
        int id = scanner.nextInt();

        departmentDAO.deleteDepartment(id);
        System.out.println("‚úÖ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —ñ –≤—Å—ñ –π–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –≤–∏–¥–∞–ª–µ–Ω—ñ!");
    }

    private static void getEmployeesByDepartmentMenu(Scanner scanner, DepartmentDAO departmentDAO) throws SQLException {
        System.out.print("–í–≤–µ–¥—ñ—Ç—å ID –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É, –¥–ª—è —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–≤–µ—Å—Ç–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤: ");
        int departmentId = scanner.nextInt();

        List<String> department = departmentDAO.getEmployeesByDepartment(departmentId);
        if (department.isEmpty()) {
            System.out.println("‚ùå –£ —Ü—å–æ–º—É –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ñ –Ω–µ–º–∞—î —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤.");
        } else {
            System.out.println("\nüë• –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∏ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É:");
            for (String dep : department) {
                System.out.println(dep);
            }
        }
    }

    private static void transferEmployee(Scanner scanner, EmployeeDAO employeeDAO) {
        System.out.print("–í–≤–µ–¥—ñ—Ç—å ID —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞: ");
        int employeeId = scanner.nextInt();
        System.out.print("–í–≤–µ–¥—ñ—Ç—å ID –Ω–æ–≤–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É: ");
        int newDepartmentId = scanner.nextInt();

        try {
            employeeDAO.transferEmployee(employeeId, newDepartmentId);
            System.out.println("‚úÖ –°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ!");
        } catch (SQLException e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: " + e.getMessage());
        }
    }

    private static void transferMultipleEmployees(Scanner scanner, EmployeeDAO employeeDAO) {
        System.out.print("–°–∫—ñ–ª—å–∫–∏ —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏? ");
        int count = scanner.nextInt();
        List<Integer> employeeIds = new ArrayList<>();

        for (int i = 0; i < count; i++) {
            System.out.print("–í–≤–µ–¥—ñ—Ç—å ID —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫–∞ #" + (i + 1) + ": ");
            employeeIds.add(scanner.nextInt());
        }

        System.out.print("–í–≤–µ–¥—ñ—Ç—å ID –Ω–æ–≤–æ–≥–æ –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É: ");
        int newDepartmentId = scanner.nextInt();

        try {
            employeeDAO.transferMultipleEmployees(employeeIds, newDepartmentId);
            System.out.println("‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –º–∞—Å–æ–≤–∏–π –ø–µ—Ä–µ–≤—ñ–¥!");
        } catch (SQLException e) {
            System.out.println("‚ùå –ü–æ–º–∏–ª–∫–∞: " + e.getMessage());
        }
    }

    private static void paginateEmployees(Scanner scanner) {
        int page = 1;
        int pageSize = 20;

        while (true) {
            System.out.println("\n–°—Ç–æ—Ä—ñ–Ω–∫–∞: " + page);
            List<String> employees = EmployeePagination.getEmployeesPage(page, pageSize);
            if (employees.isEmpty()) {
                System.out.println("‚ùå –ë—ñ–ª—å—à–µ –Ω–µ–º–∞—î —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤.");
                break;
            }
            employees.forEach(System.out::println);

            System.out.println("\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å `0` –¥–ª—è –≤–∏—Ö–æ–¥—É...");
            String input = scanner.nextLine();
            if (input.equals("0")) break;
            page++;
        }
    }
}
